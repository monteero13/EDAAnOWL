name: EDAAnOWL CI/CD

on:
  push:
    branches:
      - main # Dispara la actualizaci√≥n de 'latest'
  pull_request:
  release:
    types: [published] # Dispara la publicaci√≥n de versi√≥n
  workflow_dispatch:

permissions:
  contents: write # Permiso para hacer commit de los docs

concurrency:
  group: edaanowl-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: "üîç Validate ontology & examples"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Python deps
        run: pip install rdflib pyshacl requests
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Download ROBOT
        run: wget -q -O robot.jar https://github.com/ontodev/robot/releases/download/v1.9.4/robot.jar

      - name: RDF syntax check (Python script)
        # Verifica la sintaxis de todos los ficheros .ttl relevantes
        run: python scripts/check_rdf.py

      - name: OWL consistency (ROBOT on latest)
        run: |
          mkdir -p reports
          # Valida la ontolog√≠a que est√° actualmente en 'latest'
          java -jar robot.jar validate --input docs/latest/edaan-owl.ttl --output reports/robot-validate.tsv || true
          cat reports/robot-validate.tsv || true

      - name: SHACL (minimal example MUST pass vs latest)
        run: |
          mkdir -p reports
          # Valida el ejemplo m√≠nimo usando las shapes y la ontolog√≠a 'latest'
          pyshacl -s shapes/edaan-shapes.ttl \
                  -d docs/examples/minimal-example.ttl \
                  -e docs/latest/edaan-owl.ttl \
                  -m -f human -o reports/shacl-minimal.txt
          # Falla el workflow si el ejemplo m√≠nimo no es v√°lido
          if grep -qi "violation" reports/shacl-minimal.txt; then
            echo "‚ùå SHACL violations in minimal example"
            exit 1
          fi

      - name: Upload validation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-reports
          path: reports/

  build-latest-docs:
    name: "üìö Build 'latest' Widoco docs"
    runs-on: ubuntu-latest
    needs: validate # Solo se ejecuta si la validaci√≥n pasa
    # Se ejecuta solo en push a 'main', no en PRs ni releases
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java 11 (Widoco)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
      - name: Download Widoco
        run: wget -q https://github.com/dgarijo/Widoco/releases/download/v1.4.5/widoco-1.4.5-jar-with-dependencies.jar -O widoco.jar

      - name: Build docs for 'latest'
        run: |
          # Genera la documentaci√≥n usando la ontolog√≠a en 'latest'
          java -jar widoco.jar \
            -ontFile docs/latest/edaan-owl.ttl \
            -outFolder docs/latest \ # Guarda la salida directamente en 'latest'
            -getOntologyMetadata \ # <-- Lee metadatos del TTL (¬°Importante!)
            -rewriteAll \
            -webVowl \
            -htaccess \
            -lang en
          # Renombra el √≠ndice para compatibilidad con GitHub Pages
          if [ -f "docs/latest/index-en.html" ]; then
            mv "docs/latest/index-en.html" "docs/latest/index.html"
          fi

      - name: Commit and push 'latest' documentation
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/latest/ # A√±ade todos los cambios en la carpeta 'latest'
          # Solo hace commit si los ficheros de documentaci√≥n generados han cambiado
          git diff --cached --quiet || git commit -m "chore(docs): regenerate 'latest' Widoco documentation"
          git push

  build-release-docs:
    name: "üì¶ Publish Versioned Docs"
    runs-on: ubuntu-latest
    needs: validate # Asegura que la ontolog√≠a sea v√°lida antes de publicarla
    # Se ejecuta solo cuando publicas una nueva release en GitHub
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code for the release tag
        uses: actions/checkout@v4
        with:
          # Hace checkout del c√≥digo exacto del tag de la release (ej. v0.2.1)
          ref: ${{ github.ref }}

      - name: Setup Java 11 (Widoco)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"
      - name: Download Widoco
        run: wget -q https://github.com/dgarijo/Widoco/releases/download/v1.4.5/widoco-1.4.5-jar-with-dependencies.jar -O widoco.jar

      - name: Create Versioned Snapshot
        run: |
          # Obtiene el nombre de la tag (ej. v0.2.1) y quita la 'v' (ej. 0.2.1)
          VERSION_NAME=$(echo ${{ github.ref_name }} | sed 's/v//')
          VERSION_DIR="docs/$VERSION_NAME" # Define la carpeta de destino (ej. docs/0.2.1)

          echo "Publishing version $VERSION_NAME to $VERSION_DIR..."

          # 1. Crear directorios necesarios
          mkdir -p "$VERSION_DIR/vocabularies"

          # 2. Copiar los ficheros de esta versi√≥n espec√≠fica
          # Copia la ontolog√≠a y vocabularios que estaban en 'latest'/'vocabularies' EN ESTE TAG
          cp docs/latest/edaan-owl.ttl "$VERSION_DIR/"
          cp docs/vocabularies/* "$VERSION_DIR/vocabularies/"

          # 3. Generar los docs de Widoco para esta versi√≥n espec√≠fica
          java -jar widoco.jar \
            -ontFile "$VERSION_DIR/edaan-owl.ttl" \ # Usa la ontolog√≠a copiada
            -outFolder "$VERSION_DIR" \ # Guarda la salida en la carpeta versionada
            -getOntologyMetadata \
            -rewriteAll \
            -webVowl \
            -htaccess \
            -lang en

          if [ -f "$VERSION_DIR/index-en.html" ]; then
            mv "$VERSION_DIR/index-en.html" "$VERSION_DIR/index.html"
          fi

      - name: Commit and push versioned documentation back to main branch
        # Usa una acci√≥n simple para hacer commit y push
        uses: actions-go/push@v1
        with:
          # Publicamos las carpetas versionadas (ej. docs/0.2.1/) de vuelta a la rama 'main'
          branch: main
          force: false # No forzar push
          # Mensaje de commit descriptivo
          commit-message: "feat(docs): publish versioned documentation for ${{ github.ref_name }}"
          github-token: ${{ secrets.GITHUB_TOKEN }} # Token necesario para hacer push
